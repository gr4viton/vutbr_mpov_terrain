
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% napady 
%% louka a les - stejna strukutra ale ruzna barva - potom co rozsegmetuju na 
%% matematická morfologie - hit & miss
%% lokalni spektralni histogram
%% korelace - korelaèní matice
% kookurentní matice co-occurence - statistika z odezvy na korelaci 
% fourierka - frekvencni
% wavelety
% vyøezi z fourierky

% zkladni pøiznaky pro jednotlive oblasti - šikmost etc ->
% fraktal

% image processing analysis and machine vision
% somka
% 17ta kapitola

%% K-means

% meanshift
% rgb2gray


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% for determining tresholds
sc = 0.1;

lumTreshold = -1; % typical - [0 -> 20]
colTreshold = -1; 
for lumTreshold=linspace(10,20,10)
% for colTreshold = 3
    FI = FI+1;
    im_scaled = imresize( imMax, sc );
    im_path = [pathstr,'\',name,'_',num2str(sc*100),'_',...
        num2str(lumTreshold),num2str(colTreshold),ext]
    imwrite(im_scaled,im_path);
    map2segments(im_path, 1,1,1,1, speedUp, [lumTreshold, colTreshold] );
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% code which can be used if the functions arent in the school matlab
%% label2rgb
% cols = hsv(nColors);
% image_cols(1,:,:) = cols(:,:);
% im = uint8(image_cols*255);
%     SI=SI+1; subplot2(y,x,SI);
%     imshow(im,[]); title(strcat('colored_labels')); axis tight
% 
% colored_labels = cat(3, pixel_labels, pixel_labels, pixel_labels);
% im = uint8(colored_labels*255/nColors);
%     SI=SI+1; subplot2(y,x,SI);
%     imshow(im,[]); title(strcat('colored_labels')); axis tight
    
    
%     collabs = repmat(colored_labels, 1, nColors);
% cc(:,:,:,1:nColors) = colored_labels(:,:,:).*0;

% for i=1:nColors
%     b = (colored_labels==i);
%     for col=1:3
%         cc(:,:,col,i) = colored_labels(:,:,col).*b(:,:,col).*cols(i,col);
%     end
%    
% %     im = cc(:,:,:,i);
% %         SI=SI+1; subplot2(y,x,SI);
% %         imshow(im,[]); title(strcat('imaex')); axis tight 
%     
% %     a = colored_labels(colored_labels==i); % = cols(i);
% %     colored_labels = uint8(colored_labels);
% end
% colored_labels = uint8(sum(cc,4)/nColors*255);



% % % 
% % % ____________________________________________________
% % % TODLE nE = vícekrát provést kmeans -> pro rùzné hodnoty nColors a ponechat tu
% % % která má nejmenší sumd (kdy pro každý výpoèet je kmeans(repetitive) >= 3
% % % 
% % %  mám jiný plán
% % % 
% % % 
% % % % for every segment that has a close-enaugh compenion
% % % % allNonZeroColumn = find( diag(mDist) );
% % % siz = size(mDist,2);
% % % dia = diag(mDist);
% % % for jSegm = 1:siz
% % %     if(dia(jSegm)==0), continue; end;
% % % %   we are in column of a segment(jSegm) which has a companion segment
% % % %     for iSegm = jSegm+1:iSegm_max
% % %     % for every non zero
% % %     allNonZeroIndex = find( mDist(:,jSegm) );
% % %     
% % %     [y, x] = ind2sub(size(mDist), allNonZeroIndex);
% % %     for i=1:size(y,2)
% % %         mDist(y(i), x(i)) = jSegm;
% % %     end
% % %     mDist
% % % %     end
% % %     nSegm = 1;
% % %     
% % %     col_mean = col_mean + col(iSegm);
% % %     col_mean = col_mean / nSegm ;
% % % end
% % % 
% % % 
% % % 
% % % 
% % % indxFree = iSegm_max+1;
% % % 
% % % 
% % %                 % reindex jSegm in labels to iSegm 
% % %                 labels(labels==jSegm)=iSegm;    
% % %                 
% % %                 % calculate the mean color of these two segments
% % %                 for i=1:3
% % %                     col_mean(i) = mean( [col(iSegm,i), col(jSegm,i)] );
% % %                 end
% % %                 
% % %                 % give both segments(i,j) mean color in image
% % %                 xlabels = labels; 
% % %                 xlabels(xlabels~=iSegm) = 0;
% % %                 allNonZeroIndex = find(xlabels);
% % %                 [y, x] = ind2sub(size(xlabels),allNonZeroIndex);
% % % %                 segImLUV( y, x, :) = col_mean(:);
% % %                 segImLUV( y, x, :) = mean( [col(iSegm,:), col(jSegm,:)] );
% % % 
% % %                 
% % %                 
% % %                 
% % % meanshift end color - the color to which segment iterated to
% % %     firstNonZeroIndex = allNonZeroIndex(1); % find(xlabels, 1, 'first'); 
% % % 
% % % 
% % % permute
% % % fusedSegIndx = segImLUV;
% % % 
% % % 
% % % 
% % % 
% % % 
% % % % probably not used - delete in last version
% % % % %% original
% % % % im = im_prep;
% % % %     SI=SI+1; subplot2(y,x,SI);
% % % %     imshow(im,[]); title(strcat('preprocessed = original')); axis tight;
% % % %     
% % % % %% convert preprocessed image [im_prep] to LABspace
% % % % cform = makecform('srgb2lab');
% % % % im1_lab = applycform(im_prep,cform);
% % % % im = im1_lab;
% % % %     SI=SI+1; subplot2(y,x,SI);
% % % %     imshow(im,[]); title(strcat('preporig in labspace')); axis tight
% % % % 
% % % % %% classify colors
% % % % % get color information vectors (2:3) from image converted to lab space 
% % % % ab = double(im1_lab(:,:,2:3));
% % % % nrows = size(ab,1);
% % % % ncols = size(ab,2);
% % % % % make it a two row vector for easy inputting into kmeans
% % % % ab = reshape(ab,nrows*ncols,2);
% % % % 
% % % % % nColors = 3;
% % % % %% find which number of clusters has lowest error [ERROR(nColors) = sum(sumd)]
% % % % nColors_space = 3:6;
% % % % ERROR = zeros(size(nColors_space,2),2);
% % % % first_run = 1;
% % % % for nColors=nColors_space
% % % %     % kmeans with repetition on the color vectors
% % % % 
% % % %     kmeans_repetitions = 4;
% % % %     [cluster_idx, cluster_center, sumd] = kmeans( ...
% % % %         ab, nColors,'distance','sqEuclidean', ...
% % % %         'replicates', kmeans_repetitions); %, ...
% % % %     %     'start', 'cluster');
% % % % 
% % % %     % reshape it back to image dimensions
% % % %     pixel_labels = reshape(cluster_idx,nrows,ncols);
% % % % 
% % % %     %% show rgb_colors of center of clusters 
% % % %     % cform2rgb = makecform('lab2srgb');
% % % %     % 
% % % %     % bright_space = 0:16:255;
% % % %     % bright_rows = size(bright_space,2);
% % % %     % brightness = repmat(bright_space, size(cluster_center, 1), 1);
% % % %     % % x = repmat(cluster_center(:,1), 1, bright_rows);
% % % %     % cluster_center3(:,:,:) = cat(3,  ...
% % % %     %     brightness, ...
% % % %     %     repmat(cluster_center(:,1), 1, bright_rows), ...
% % % %     %     repmat(cluster_center(:,2), 1, bright_rows) ...
% % % %     %     );
% % % %     % 
% % % %     % % im = uint8(cluster_center3(:,127,:));
% % % %     % % im = uint8(cluster_center3);
% % % %     % %     SI=SI+1; subplot2(y,x,SI);
% % % %     % %     imshow(im,[]); title(strcat('cluster centers lab')); axis tight; 
% % % %     % 
% % % %     % %% get centers of kmeans color clusters to rgb
% % % %     % cluster_center_rgb = applycform(uint8(cluster_center3), cform2rgb);
% % % %     % 
% % % %     % % cluster_center_image = uint8(cluster_center);
% % % %     % % cluster_center_image3 = cat(3, cluster_center_image, cluster_center_image, cluster_center_image );
% % % %     % 
% % % %     % im = cluster_center_rgb;
% % % %     %     SI=SI+1; subplot2(y,x,SI);
% % % %     %     imshow(im,[]); title(strcat('cluster centers rgb')); axis tight; 
% % % % 
% % % % 
% % % %     %% colorize pixel labels
% % % %     colored_labels = label2rgb(pixel_labels, @hsv, 'c', 'shuffle');
% % % %     
% % % %     ERROR(nColors) = sum(sumd);
% % % %     if first_run == 1
% % % %         ERROR_1 = ERROR(nColors);
% % % %         first_run = 0;
% % % %     end
% % % %     
% % % %     im = colored_labels;
% % % %         SI=SI+1; subplot2(y,x,SI);
% % % %         imshow(im,[]); title(strcat('kmeans colored labels nColor=', ...
% % % %         num2str(nColors),';E=', ...
% % % %         num2str(ERROR(nColors)/ERROR_1),'')); axis tight; 
% % % % 
% % % %     im_gray = rgb2gray(im_orig);
% % % %     im_gray3 = cat(3, im_gray, im_gray, im_gray );
% % % %     a = 0.3;
% % % %     % for a = 1-(0.65:0.05:0.9)
% % % %         colored_image = imlincomb(a, colored_labels, 1-a, im_gray3);
% % % %         im = colored_image;
% % % %             SI=SI+1; subplot2(y,x,SI);
% % % %             imshow(im,[]); title(strcat('grayed preorig[', ...
% % % %                 num2str(1-a),'] + colorlabels [',num2str(a),']')); axis tight
% % % %     % end
% % % %     
% % % % end % kmeans with different nColors
% % % % 
% % % % I = im_orig;
% % % % [fimg labels modes regsize grad conf] = edison_wrapper(I,@RGB2Luv);
% % % % imshow(Luv2RGB(fimg));
% % % 
% % % 
% % % MeanShiftCluster
% % % change
% % % 
% % % % write normalized ERRORS
% % % minERROR = min(ERROR);
% % % if(minERROR == 0) 
% % %     minERROR = 1;
% % % end
% % % ERROR = ERROR / minERROR;
% % % SI2 = SI;
% % % for nColors=fliplr(nColors_space)
% % %     SI2=SI2-2; subplot2(y,x,SI2);
% % %     title(strcat('kmeans colored labels nColor=',num2str(nColors),';sumd=',num2str(ERROR(nColors)),''));
% % % end
% % % 
% % %  % segment images
% % %  
% % % segmented_images = cell(1,nColors);
% % % rgb_label = repmat(pixel_labels,[1 1 3]);
% % % 
% % % for k = 1:nColors
% % %     color = a_im;
% % %     color(rgb_label ~= k) = 0;
% % %     segmented_images{k} = color;
% % % end
% % % 
% % % for i=1:nColors
% % %     im = segmented_images{i};
% % %         SI=SI+1; subplot2(y,x,SI);
% % %         imshow(im,[]); title(strcat('objects in cluster ',num2str(i))); axis tight
% % % end








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%               we already have jSegm color!!                
%                 % get jSegm color
%                 xlabels = labels; 
%                 xlabels(xlabels~=jSegm) = 0;
%                 xlabels = xlabels ./ jSegm;
%                 
%                 allNonZeroIndex = find(xlabels);
%                 [y, x] = ind2sub(size(xlabels),allNonZeroIndex(1));
%                 col(jSegm,:) = segImLUV( y, x, :);


                % reindex jSegm in labels to iSegm 
                labels(labels==jSegm)=iSegm;    
                
                % calculate the mean color of these two segments
                for i=1:3
                    col_mean(i) = mean( [col(iSegm,i), col(jSegm,i)] );
                end
                
                % give both segments(i,j) mean color in image
                xlabels = labels; 
                xlabels(xlabels~=iSegm) = 0;
                allNonZeroIndex = find(xlabels);
                [y, x] = ind2sub(size(xlabels),allNonZeroIndex);
%                 segImLUV( y, x, :) = col_mean(:);
                segImLUV( y, x, :) = mean( [col(iSegm,:), col(jSegm,:)] );

                
%                 mDist(iSegm,iSegm) = indxFree;
%                 mDist(jSegm,jSegm) = indxFree;
%                 indxFree = indxFre





%% euler number testing
% figure(51);
% SI = 0;
% SX=4;SY=3;
% for i = 1:fi_max
%     xlabels = labels;
%     xlabels(xlabels~=i) = 0;
%     eul1 = bweuler( uint16(xlabels) ,8);
%     im = uint16(xlabels);
%         SI=SI+1; subplot(SY,SX,SI);
%         imshow(im,[]); 
%         title(strcat('i[',num2str(i),'] eul = ',num2str(eul1),'')); axis tight
% end


%% anonymous functions for index parameters
% featureList([ index ]) - get index of segment from labels(y,x)
% fi = @(y,x) labels(y,x)+1;
% iSegm_sum = iSegm_max - 1;
% [ featureList(index) ] - get featureList that corresponds to labels(y,x)
% fL = @(y,x) featureList(fi(y,x));
% fL = @(y,x) ftrList(uint16(labels(y,x)+1));
% not functional [pointer to the array of struct] ?

